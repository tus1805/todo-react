# This is a basic workflow to help you get started with Actions
 
name: ci
 
# Controls when the workflow will run
on:
  # Triggers the workflow on push or pull request events but only for the main branch
  push:
    branches: [CI-CD]
  pull_request:
    branches: [CI-CD]
 
  # Allows you to run this workflow manually from the Actions tab
  workflow_dispatch:
#
env:
  IMAGE_NAME: 'bachdi/todo_first_test'
  CONTAINER_NAME: 'Todo'
 
# A workflow run is made up of one or more jobs that can run sequentially or in parallel
jobs:
  # This workflow contains a single job called "build"
  build_and_push_to_docker_hub:
    # The type of runner that the job will run on
    runs-on: ubuntu-latest
 
    strategy:
      matrix:
        node-version: [14.x]
 
    # Steps represent a sequence of tasks that will be executed as part of the job
    steps:
      # Checks-out your repository under $GITHUB_WORKSPACE, so your job can access it
      - name: Checkout repository
        uses: actions/checkout@v2
 
      - name: Login to Docker Hub
        uses: docker/login-action@v1
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v1
 
      - name: Build and push
        uses: docker/build-push-action@v2
        with:
          context: .
          file: ./Dockerfile
          push: true
          tags: ${{ secrets.DOCKER_USERNAME }}/todo_fe:latest
 
  deploy_to_digital_ocean:
    # The type of runner that the job will run on
    runs-on: ubuntu-latest
    needs: build_and_push_to_docker_hub
 
    strategy:
      matrix:
        node-version: [14.x]
 
    # Steps represent a sequence of tasks that will be executed as part of the job
    steps:
      - name: Deploy to Digital Ocean droplet via SSH action
        uses: appleboy/ssh-action@v0.1.3
        with:
          # host: ${{ secrets.HOST }}
          username: ${{ secrets.USERNAME }}
          key: ${{ secrets.SSHKEY }}
          envs: CONTAINER_NAME, IMAGE_NAME
          script: |
            docker stop $(echo $CONTAINER_NAME) && docker rm $(echo $CONTAINER_NAME)
            docker run --name $(echo $CONTAINER_NAME) -p 9000:9000 -d $(echo $IMAGE_NAME)